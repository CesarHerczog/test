#limpio la memoria
rm(list=ls())
gc()
require("data.table")
require("xgboost")
alumno_apellido  <- "herczog"
#cargo los datasets
#setwd( "~/buckets/b1/recuperatorio/uba2022/herczog/")
setwd("C:\\gdrive\\DMEYF2022\\")
dataset_generacion  <- fread( paste0( alumno_apellido, "_generacion.txt.gz") )
dataset_aplicacion  <- fread( paste0( alumno_apellido, "_aplicacion.txt.gz") )
#dejo la clase en 0,1
dataset_generacion[ , clase01 := as.integer(clase=="SI") ]
dgeneracion  <- xgb.DMatrix( data=  data.matrix( dataset_generacion[ , !c("numero_de_cliente","clase","clase01"), with=FALSE]),
label= dataset_generacion[ , clase01 ]
)
#llamo al XGBoost,  notar lo frugal de los hiperparametros
set.seed( 102191 ) #mi querida random seed, para que las corridas sean reproducibles
modelo  <- xgb.train(data= dgeneracion,
objective= "binary:logistic",
tree_method= "hist",
max_bin= 31,
base_score= mean( getinfo(dgeneracion, "label") ),
eta= 0.04,
nrounds= 300,
colsample_bytree= 0.6 )
#aplico a los datos de aplicacion, que NO TIENE CLASE
daplicacion  <- xgb.DMatrix( data= data.matrix( dataset_aplicacion[ , !c("numero_de_cliente"), with=FALSE]) )
#aplico el modelo a datos nuevos
aplicacion_prediccion  <- predict(  modelo, daplicacion )
#uno las columnas de numero_de_cliente y la probabilidad recien calculada
prediccion_final  <- cbind(  dataset_aplicacion[ ,c("numero_de_cliente")], aplicacion_prediccion )
#le doy nombre a las columnas
colnames( prediccion_final )  <- c( "numero_de_cliente", "prob_positivo" )
#Genero las TRES salidas
#grabo todas las probabilidad, simplemente para tenerlo
fwrite( prediccion_final[ order( -prob_positivo) ],
file= paste0( alumno_apellido, "_lineademuerte_recuperatorio_probabilidades.txt"),
sep= "\t",
eol= "\r\n")
View(prediccion_final)
#Ahora grabo la salida que debo entregar en la materia, que son solamente los ids
#me quedo solamente con los numero_de_cliente donde probabilidad > 0.025
fwrite( as.data.table( prediccion_final[ prob_positivo > 0.025  , "numero_de_cliente" ] ),
file= paste0( alumno_apellido, "_lineademuerte_recuperatorio_entregar.txt"),
col.names=FALSE,
sep= "\t",
eol= "\r\n")
#grabo la importancia de las variables
write.table(  xgb.importance( model = modelo )
, file= paste0( alumno_apellido, "_lineademuerte_recuperatorio_importancia.txt")
, sep= "\t"
, eol= "\r\n"
, row.names= FALSE
)
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("rlist")
require("lightgbm")
#paquetes necesarios para la Bayesian Optimization
require("DiceKriging")
require("mlrMBO")
options(error = function() {
traceback(20);
options(error = NULL);
stop("exiting after script error")
})
#Aqui se cargan los hiperparametros
hs <- makeParamSet(
makeNumericParam("learning_rate",    lower=    0.005, upper=    0.3),
makeNumericParam("feature_fraction", lower=    0.2  , upper=    1.0),
makeIntegerParam("min_data_in_leaf", lower=    0L   , upper=  8000L),
makeIntegerParam("num_leaves",       lower=   16L   , upper=  1024L),
makeIntegerParam("envios",           lower= 5000L   , upper= 15000L)
)
#defino los parametros de la corrida, en una lista, la variable global  PARAM
#  muy pronto esto se leera desde un archivo formato .yaml
PARAM  <- list()
PARAM$experimento  <- "HT7231"
#PARAM$input$dataset       <- "./datasets/competencia2_2022.csv.gz"
PARAM$input$dataset       <- setwd("C:\\gdrive\\DMEYF2022\\")
#PARAM$input$dataset       <- "./datasets/competencia2_2022.csv.gz"
PARAM$input$dataset       <- setwd("C:\\gdrive\\DMEYF2022\\generacion.txt.gz")
#PARAM$input$dataset       <- "./datasets/competencia2_2022.csv.gz"
PARAM$input$dataset       <- setwd("C:\\gdrive\\DMEYF2022\\_generacion.txt.gz")
#PARAM$input$dataset       <- "./datasets/competencia2_2022.csv.gz"
PARAM$input$dataset       <- setwd("C:\\gdrive\\DMEYF2022\\herczog_generacion.txt.gz")
#PARAM$input$dataset       <- "./datasets/competencia2_2022.csv.gz"
PARAM$input$dataset       <- setwd("C:\\gdrive\\DMEYF2022\\herczog_generacion.txt.gz")
setwd("C:\\gdrive\\DMEYF2022\\")
PARAM$input$dataset       <- "./herczog_generacion.txt.gz"
PARAM$input$training      <- "./herczog_generacion.txt.gz"
PARAM$trainingstrategy$undersampling  <-  1.0   # un undersampling de 0.1  toma solo el 10% de los CONTINUA
PARAM$trainingstrategy$semilla_azar   <- 102191  #Aqui poner la propia semilla
PARAM$hyperparametertuning$iteraciones <- 100
PARAM$hyperparametertuning$xval_folds  <- 5
PARAM$hyperparametertuning$POS_ganancia  <- 78000
PARAM$hyperparametertuning$NEG_ganancia  <- -2000
PARAM$hyperparametertuning$semilla_azar  <- 102191  #Aqui poner la propia semilla, PUEDE ser distinta a la de trainingstrategy
loguear  <- function( reg, arch=NA, folder="./exp/", ext=".txt", verbose=TRUE )
{
archivo  <- arch
if( is.na(arch) )  archivo  <- paste0(  folder, substitute( reg), ext )
if( !file.exists( archivo ) )  #Escribo los titulos
{
linea  <- paste0( "fecha\t",
paste( list.names(reg), collapse="\t" ), "\n" )
cat( linea, file=archivo )
}
linea  <- paste0( format(Sys.time(), "%Y%m%d %H%M%S"),  "\t",     #la fecha y hora
gsub( ", ", "\t", toString( reg ) ),  "\n" )
cat( linea, file=archivo, append=TRUE )  #grabo al archivo
if( verbose )  cat( linea )   #imprimo por pantalla
}
fganancia_logistic_lightgbm  <- function( probs, datos)
{
vpesos   <- get_field(datos, "weight")
#vector de ganancias
vgan  <- ifelse( vpesos == 1.0000002, PARAM$hyperparametertuning$POS_ganancia,
ifelse( vpesos == 1.0000001, PARAM$hyperparametertuning$NEG_ganancia,
PARAM$hyperparametertuning$NEG_ganancia / PARAM$trainingstrategy$undersampling ) )
tbl  <- as.data.table( list( "vprobs" = probs, "vgan" = vgan ) )
setorder( tbl,  -vprobs )
ganancia <- tbl[ 1:GLOBAL_envios, sum( vgan ) ]
return( list( "name"= "ganancia",
"value"=  ganancia,
"higher_better"= TRUE ) )
}
View(fganancia_logistic_lightgbm)
View(fganancia_logistic_lightgbm)
EstimarGanancia_lightgbm  <- function( x )
{
gc()  #libero memoria
#llevo el registro de la iteracion por la que voy
GLOBAL_iteracion  <<- GLOBAL_iteracion + 1
#para usar en fganancia_logistic_lightgbm
GLOBAL_envios <<- as.integer(x$envios/PARAM$hyperparametertuning$xval_folds)   #asigno la variable global
kfolds  <- PARAM$hyperparametertuning$xval_folds   # cantidad de folds para cross validation
param_basicos  <- list( objective= "binary",
metric= "custom",
first_metric_only= TRUE,
boost_from_average= TRUE,
feature_pre_filter= FALSE,
verbosity= -100,
max_depth=  -1,         # -1 significa no limitar,  por ahora lo dejo fijo
min_gain_to_split= 0.0, #por ahora, lo dejo fijo
lambda_l1= 0.0,         #por ahora, lo dejo fijo
lambda_l2= 0.0,         #por ahora, lo dejo fijo
max_bin= 31,            #por ahora, lo dejo fijo
num_iterations= 9999,   #un numero muy grande, lo limita early_stopping_rounds
force_row_wise= TRUE,   #para que los alumnos no se atemoricen con tantos warning
seed= PARAM$hyperparametertuning$semilla_azar
)
#el parametro discolo, que depende de otro
param_variable  <- list(  early_stopping_rounds= as.integer(50 + 5/x$learning_rate) )
param_completo  <- c( param_basicos, param_variable, x )
set.seed( PARAM$hyperparametertuning$semilla_azar )
modelocv  <- lgb.cv( data= dtrain,
eval= fganancia_logistic_lightgbm,
stratified= TRUE, #sobre el cross validation
nfold= kfolds,    #folds del cross validation
param= param_completo,
verbose= -100
)
#obtengo la ganancia
ganancia  <- unlist(modelocv$record_evals$valid$ganancia$eval)[ modelocv$best_iter ]
ganancia_normalizada  <-  ganancia* kfolds     #normailizo la ganancia
param_completo$num_iterations <- modelocv$best_iter  #asigno el mejor num_iterations
param_completo["early_stopping_rounds"]  <- NULL     #elimino de la lista el componente  "early_stopping_rounds"
#Voy registrando la importancia de variables
if( ganancia_normalizada >  GLOBAL_gananciamax )
{
GLOBAL_gananciamax  <<- ganancia_normalizada
modelo  <- lgb.train( data= dtrain,
param= param_completo,
verbose= -100
)
tb_importancia  <- as.data.table( lgb.importance(modelo ) )
archivo_importancia  <- paste0( "impo_", GLOBAL_iteracion,".txt")
fwrite( tb_importancia,
file= archivo_importancia,
sep= "\t" )
}
#el lenguaje R permite asignarle ATRIBUTOS a cualquier variable
attr(ganancia_normalizada ,"extras" )  <- list("num_iterations"= modelocv$best_iter)  #esta es la forma de devolver un parametro extra
#logueo
xx  <- param_completo
xx$ganancia  <- ganancia_normalizada   #le agrego la ganancia
xx$iteracion <- GLOBAL_iteracion
loguear( xx, arch= klog )
return( ganancia_normalizada )
}
#Aqui se debe poner la carpeta de la computadora local
setwd("~/buckets/b1/")   #Establezco el Working Directory
setwd("C:\\gdrive\\DMEYF2022\\")
#cargo el dataset donde voy a entrenar el modelo
dataset  <- fread( PARAM$input$dataset )
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "./exp1/",  showWarnings = FALSE )
dir.create( paste0( "./exp1/", PARAM$experimento, "/"), showWarnings = FALSE )
setwd( paste0( "./exp1/", PARAM$experimento, "/") )   #Establezco el Working Directory DEL EXPERIMENTO
#en estos archivos quedan los resultados
kbayesiana  <- paste0( PARAM$experimento, ".RDATA" )
klog        <- paste0( PARAM$experimento, ".txt" )
GLOBAL_iteracion  <- 0   #inicializo la variable global
GLOBAL_gananciamax <- -1 #inicializo la variable global
#si ya existe el archivo log, traigo hasta donde llegue
if( file.exists(klog) )
{
tabla_log  <- fread( klog )
GLOBAL_iteracion  <- nrow( tabla_log )
GLOBAL_gananciamax  <- tabla_log[ , max( ganancia ) ]
}
View(dataset)
#paso la clase a binaria que tome valores {0,1}  enteros
#dataset[ foto_mes %in% PARAM$input$training, clase01 := ifelse( clase_ternaria=="CONTINUA", 0L, 1L) ]
dataset[ , clase01 := ifelse( clase =="NO", 0L, 1L) ]
#los campos que se van a utilizar
campos_buenos  <- setdiff( colnames(dataset), c("clase","clase01", "azar", "training" ) )
set.seed( PARAM$trainingstrategy$semilla_azar )
dataset[  , azar := runif( nrow( dataset ) ) ]
dataset[  , training := 0L ]
#dataset[ foto_mes %in% PARAM$input$training &
dataset[ ( azar <= PARAM$trainingstrategy$undersampling | clase_ternaria %in% c( "BAJA+1", "BAJA+2" ) ),
training := 1L ]
#dataset[ foto_mes %in% PARAM$input$training &
dataset[ ( azar <= PARAM$trainingstrategy$undersampling | clase %in% c( "SI" ) ),
training := 1L ]
#dejo los datos en el formato que necesita LightGBM
dtrain  <- lgb.Dataset( data= data.matrix(  dataset[ training == 1L, campos_buenos, with=FALSE]),
label= dataset[ training == 1L, clase01 ],
weight=  dataset[ training == 1L, ifelse( clase_ternaria=="SI", 1.0000002, ifelse( clase=="SI",  1.0000001, 1.0) )],
free_raw_data= FALSE  )
#dejo los datos en el formato que necesita LightGBM
dtrain  <- lgb.Dataset( data= data.matrix(  dataset[ training == 1L, campos_buenos, with=FALSE]),
label= dataset[ training == 1L, clase01 ],
weight=  dataset[ training == 1L, ifelse( clase=="SI", 1.0000002, ifelse( clase=="SI",  1.0000001, 1.0) )],
free_raw_data= FALSE  )
#Aqui comienza la configuracion de la Bayesian Optimization
funcion_optimizar  <- EstimarGanancia_lightgbm   #la funcion que voy a maximizar
configureMlr( show.learner.output= FALSE)
#configuro la busqueda bayesiana,  los hiperparametros que se van a optimizar
#por favor, no desesperarse por lo complejo
obj.fun  <- makeSingleObjectiveFunction(
fn=       funcion_optimizar, #la funcion que voy a maximizar
minimize= FALSE,   #estoy Maximizando la ganancia
noisy=    TRUE,
par.set=  hs,     #definido al comienzo del programa
has.simple.signature = FALSE   #paso los parametros en una lista
)
ctrl  <- makeMBOControl( save.on.disk.at.time= 600,  save.file.path= kbayesiana)  #se graba cada 600 segundos
ctrl  <- setMBOControlTermination(ctrl, iters= PARAM$hyperparametertuning$iteraciones )   #cantidad de iteraciones
ctrl  <- setMBOControlInfill(ctrl, crit= makeMBOInfillCritEI() )
#establezco la funcion que busca el maximo
surr.km  <- makeLearner("regr.km", predict.type= "se", covtype= "matern3_2", control= list(trace= TRUE))
#inicio la optimizacion bayesiana
if( !file.exists( kbayesiana ) ) {
run  <- mbo(obj.fun, learner= surr.km, control= ctrl)
} else {
run  <- mboContinue( kbayesiana )   #retomo en caso que ya exista
}
